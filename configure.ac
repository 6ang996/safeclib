#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script

# Prelude.
AC_PREREQ([2.65])

AC_INIT([Safe C Library], [0.5.0], [UNKNOWN-BUG-EMAIL], [safec],
	[http://sourceforge.net/projects/safeclib/])

# unique source file --- primitive safety check
AC_CONFIG_SRCDIR([src/memcmp_s.c])

# extra autoconf macros are kept here
AC_CONFIG_MACRO_DIR([m4])

# place to put some extra build scripts
AC_CONFIG_AUX_DIR([build-aux])

# define things like _GNU_SOURCE appropriately
AC_USE_SYSTEM_EXTENSIONS

# really severe build strictness also place generated object files (.o)
# into the same directory as their source files, in order to avoid
# collisions when non-recursive make is used.
AM_INIT_AUTOMAKE([1.11 foreign subdir-objects dist-bzip2 -Wall -Werror])
AM_SILENT_RULES([yes])

# Enable LibTool as we are build a library
LT_PREREQ([2.2.6])
LT_INIT

# Configure options
# AC_ARG_ENABLE(gcov,
# AC_HELP_STRING([--enable-gcov],
#                [turn on test coverage @<:@default=no@:>@]),
# [case "${enableval}" in
#   yes) enable_gcov=true ;;
#   no)  enable_gcov=false ;;
#   *)   AC_MSG_ERROR(bad value ${enableval} for --enable-gcov) ;;
# esac], [enable_gcov=false ])
# 
# if test x$enable_gcov = xtrue ; then
#   if test -n "$GCC"; then
#     AC_MSG_ERROR([gcov only works if gcc is used])
#   fi
# 
#   GCOV_CFLAGS="-fprofile-arcs -ftest-coverage"
#   AC_SUBST(GCOV_CFLAGS)
# 
#   dnl libtool 1.5.22 and lower strip -fprofile-arcs from the flags
#   dnl passed to the linker, which is a bug; -fprofile-arcs implicitly
#   dnl links in -lgcov, so we do it explicitly here for the same effect
#   GCOV_LIBS=-lgcov
#   AC_SUBST(GCOV_LIBS)
# fi
# 
# AM_CONDITIONAL(ENABLE_GCOV, test x"$enable_gcov" = "xtrue")

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

# Checks for header files.
AC_CHECK_HEADERS([stdlib.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_CHECK_FUNCS([memset strcasecmp strcspn strpbrk strspn strstr])


# Define these substations here to keep all version information in
# one place. For information on how to properly maintain the library
# version information, refer to the libtool manual, section "Updating
# library version information":
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
AC_SUBST([SAFEC_SO_VERSION], [1:0:0])
AC_SUBST([SAFEC_API_VERSION], [1.0])
#AC_SUBST([LIBTOOL_DEPS])

# Output files

# Generate two configuration headers; one for building the library
# itself with an autogenerated template, and a second one that will
# be installed alongside the library.
# AC_CONFIG_HEADERS([config.h safecconfig.h])
AC_CONFIG_HEADERS([config.h])

# Override the template file name of the generated .pc file, so that there
# is no need to rename the template file when the API version changes.
AC_CONFIG_FILES([safec-${SAFEC_API_VERSION}.pc:safec.pc.in
                 Makefile
                 src/safec.h
                 src/Makefile
                 tests/Makefile])
AC_OUTPUT
