/*------------------------------------------------------------------
 * safe_types.h - C99 std types & defs or Linux kernel equivalents
 *
 * March 2007, Bo Berry
 * Modified 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>
 *
 * Copyright (c) 2007-2013 by Cisco Systems, Inc
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */

#ifndef __SAFE_TYPES_H__
#define __SAFE_TYPES_H__

#ifdef __cplusplus
extern "C" {
#endif

/* C11 appendix K types - specific for bounds checking */
typedef size_t  rsize_t;

#ifndef RSIZE_MAX
# define RSIZE_MAX (~(rsize_t)0)  /* leave here for completeness */
#endif

#ifdef __KERNEL__
/* linux kernel environment */

#include <linux/stddef.h>
#include <linux/types.h>
#include <linux/errno.h>

/* errno_t isn't defined in the kernel */
typedef int errno_t;

#else

#include <stdio.h>
@INSERT_SYS_TYPES_H@
@INSERT_INTTYPES_H@
@INSERT_STDINT_H@
@INSERT_ERRNO_H@

@FALLBACK_ERRNO_T@

#ifndef __cplusplus
@INSERT_BOOL_SUPPORT@
#endif

#endif /* __KERNEL__ */

typedef void (*constraint_handler_t) (const char *restrict /* msg */,
                                      void *restrict       /* ptr */,
                                      errno_t              /* error */);

#define BOS_UNKNOWN ((size_t)-1)
#define _BOS_KNOWN(dest)  (BOS(dest) != BOS_UNKNOWN)
#ifdef HAVE___BUILTIN_OBJECT_SIZE
# if defined(_FORTIFY_SOURCE) && _FORTIFY_SOURCE > 1
#  define BOS(dest)  __builtin_object_size((dest),1)
# else
#  define BOS(dest) __builtin_object_size((dest),0)
# endif
# define BOSW(dest) (BOS(dest)/sizeof(wchar_t))
# define _BOS_CHK(dest,dmax)    (BOS(dest) != BOS_UNKNOWN && (size_t)(dmax) != BOS(dest))
# define _BOS_OVR(dest,dmax)    (BOS(dest) != BOS_UNKNOWN && (size_t)(dmax) > BOS(dest))
# define _BOSW_CHK(dest,dmax)   (BOS(dest) != BOS_UNKNOWN && (size_t)(dmax) != BOSW(dest))
# define _BOSW_OVR(dest,dmax)   (BOS(dest) != BOS_UNKNOWN && (size_t)(dmax) > BOSW(dest))
# define _BOS_CHK_N(dest,dmax)  ((size_t)(dmax) != BOS(dest))
# define _BOS_OVR_N(dest,dmax)  ((size_t)(dmax) > BOS(dest))
# define _BOSW_CHK_N(dest,dmax) ((size_t)(dmax) != BOSW(dest))
# define _BOSW_OVR_N(dest,dmax) ((size_t)(dmax) > BOSW(dest))
#else
# define BOS(dest)  BOS_UNKNOWN
# define BOSW(dest) BOS_UNKNOWN
# define _BOS_CHK(dest)  0
# define _BOSW_CHK(dest) 0
# define _BOS_OVR_N(dest,dmax) 0
#endif

#ifndef __has_attribute
#define __has_attribute(x) 0
#endif
/* so far clang-7 only */
#if __has_attribute(diagnose_if) && defined(HAVE___BUILTIN_OBJECT_SIZE)
# ifdef HAVE_WARN_DMAX
#  ifdef HAVE_ERROR_DMAX
#   define bos_chk_sev "error"
#  else
#   define bos_chk_sev "warning"
#  endif
#  define BOS_CHK(dest) \
    __attribute__((diagnose_if(_BOS_OVR(dest,dmax), "dmax overflow", "error"))) \
    __attribute__((diagnose_if(_BOS_CHK(dest,dmax), "wrong dmax", bos_chk_sev)))
#  define BOSW_CHK(dest) \
    __attribute__((diagnose_if(_BOSW_OVR(dest,dmax), "dmax overflow", "error"))) \
    __attribute__((diagnose_if(_BOSW_CHK(dest,dmax), "wrong dmax", bos_chk_sev)))
# else /* !HAVE_WARN_DMAX */
#  define BOS_CHK(dest) \
    __attribute__((diagnose_if(_BOS_OVR(dest,dmax), "dmax overflow", "error")))
#  define BOSW_CHK(dest) \
    __attribute__((diagnose_if(_BOSW_OVR(dest,dmax), "dmax overflow", "error")))
# endif
#else
# define BOS_CHK(dest)
# define BOSW_CHK(dest)
#endif

#ifdef __cplusplus
}
#endif
#endif /* __SAFE_TYPES_H__ */
